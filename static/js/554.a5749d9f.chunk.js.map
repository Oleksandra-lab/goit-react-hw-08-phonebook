{"version":3,"file":"static/js/554.a5749d9f.chunk.js","mappings":"uNAEaA,E,QAAaC,EAAAA,MAAH,+J,SCCR,SAASC,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC/B,OACE,UAACH,EAAD,WAAY,wBAEV,kBACEI,KAAK,OACLC,KAAK,SACLC,SAAU,SAAAC,GAAG,OAAIJ,EAASI,EAAIC,OAAOC,MAAxB,MAIpB,C,2CCZKC,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAAV,EAEhBC,GAAiBC,EAAAA,EAAAA,IAC5BJ,GACA,SAAAE,GAAS,OAAIA,EAAUG,QAAd,IAEEC,GAA0BF,EAAAA,EAAAA,IACrCJ,GACA,SAAAE,GAAS,OAAIA,EAAUK,SAAd,I,IAEwBH,EAAAA,EAAAA,IACjCJ,GACA,SAAAE,GAAS,OAAIA,EAAUM,KAAd,KAE6BJ,EAAAA,EAAAA,IACtCJ,GACA,SAAAE,GAAS,OAAIA,EAAUO,UAAd,I,SC4DX,EA7DqB,WACnB,OAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAETE,GAAWC,EAAAA,EAAAA,MACXZ,GAAWa,EAAAA,EAAAA,IAAYf,GACvBI,GAAYW,EAAAA,EAAAA,IAAYZ,IAI9Ba,EAAAA,EAAAA,YAAU,WACRH,GAASI,EAAAA,EAAAA,MACV,GAAE,CAACJ,IAYJ,OACE,4BACE,kBAAMK,SAAUT,GAZH,SAAAU,GACfN,GAASO,EAAAA,EAAAA,IAAWD,IACpBT,GACD,IASG,WACE,8BACE,0BAAM,WACN,oCAAWF,EAAS,OAAQ,CAAEa,UAAU,KAAxC,IAAiD9B,KAAK,UACrDoB,EAAOnB,OAAQ,0BAAM,+BAExB,8BACE,0BAAM,aACN,oCAAWgB,EAAS,SAAU,CAAEa,UAAU,KAA1C,IAAmD9B,KAAK,UACvDoB,EAAOW,SAAU,0BAAM,+BAG1B,mBAAQ/B,KAAK,SAAb,SAAsB,oBAExB,SAACF,EAAD,IACCe,IAAa,SAACmB,EAAA,EAAD,KACd,wBACGC,MAAMC,QAAQvB,IACbA,EAASwB,KAAI,SAAAP,GACX,OACE,2BACE,wBAAKA,EAAQ3B,QACb,uBAAI2B,EAAQG,UACZ,mBAAQK,QAAS,kBA9BPC,EA8B6BT,EAAQU,GA7B3DC,QAAQC,IAAIH,QACZf,GAASmB,EAAAA,EAAAA,IAAcJ,IAFD,IAAAA,CA8BO,EAAjB,SAAoD,aAH7CT,EAAQU,GAMpB,QAIV,C","sources":["components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","redux/contacts.selectors.js","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FilterWrap = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 20px;\n\n  input{\n    margin-top: 15px;\n  }\n  \n`;\n","import React from 'react';\nimport { FilterWrap } from './Filter.styled';\n\nexport default function Filter({ onFilter }) {\n  return (\n    <FilterWrap>\n      Find contact by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={evt => onFilter(evt.target.value)}\n      />\n    </FilterWrap>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectPhonebook = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.contacts\n);\nexport const selectContactsIsLoading = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.isLoading\n);\nexport const selectContactsError = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.error\n);\nexport const selectContactsFilterTerm = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.filterTerm\n);","import Filter from 'components/Filter/Filter';\nimport Loader from '../components/Loader/Loader';\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  // selectContactsError,\n  // selectContactsFilterTerm,\n  selectContactsIsLoading,\n} from 'redux/contacts.selectors';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contactsReducer';\n\nconst ContactsPage = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  // const error = useSelector(selectContactsError);\n  // const filterTerm = useSelector(selectContactsFilterTerm);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onSubmit = contact => {\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const onDeleteContact = contactId => {\n    console.log(contactId);\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>\n          <span>Name:</span>\n          <input {...register('name', { required: true })} type=\"text\" />\n          {errors.name && <span>This field is required</span>}\n        </label>\n        <label>\n          <span>Number:</span>\n          <input {...register('number', { required: true })} type=\"text\" />\n          {errors.number && <span>This field is required</span>}\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n      <Filter/>\n      {isLoading && <Loader />}\n      <ul>\n        {Array.isArray(contacts) &&\n          contacts.map(contact => {\n            return (\n              <li key={contact.id}>\n                <h3>{contact.name}</h3>\n                <p>{contact.number}</p>\n                <button onClick={() => onDeleteContact(contact.id)}>Delete</button>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsPage;"],"names":["FilterWrap","styled","Filter","onFilter","type","name","onChange","evt","target","value","selectPhonebook","state","phonebook","selectContacts","createSelector","contacts","selectContactsIsLoading","isLoading","error","filterTerm","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","useSelector","useEffect","fetchContacts","onSubmit","contact","addContact","required","number","Loader","Array","isArray","map","onClick","contactId","id","console","log","deleteContact"],"sourceRoot":""}