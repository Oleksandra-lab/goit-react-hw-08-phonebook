{"version":3,"file":"static/js/298.e7dffbdf.chunk.js","mappings":"qNAQA,EANiB,SAAC,GAAe,IAAdA,EAAa,EAAbA,QACf,OACI,cAAGC,UAAU,QAAb,SAAsBD,GAE7B,E,uCCJKE,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAAV,EAEhBC,GAAiBC,EAAAA,EAAAA,IAC5BJ,GACA,SAAAE,GAAS,OAAIA,EAAUG,QAAd,IAEEC,GAA0BF,EAAAA,EAAAA,IACrCJ,GACA,SAAAE,GAAS,OAAIA,EAAUK,SAAd,IAEEC,GAAsBJ,EAAAA,EAAAA,IACjCJ,GACA,SAAAE,GAAS,OAAIA,EAAUO,KAAd,IAMEC,EAA2B,SAAAT,GAAK,OAAIA,EAAMU,OAAOA,MAAjB,E,oBCoF7C,EArFqB,WACnB,OAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAETE,GAAWC,EAAAA,EAAAA,MACXd,GAAWe,EAAAA,EAAAA,IAAYjB,GACvBI,GAAYa,EAAAA,EAAAA,IAAYd,GACxBG,GAAQW,EAAAA,EAAAA,IAAYZ,GACpBa,GAAaD,EAAAA,EAAAA,IAAYV,IAE/BY,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,MACV,GAAE,CAACL,IAEJ,IAcMM,EACS,OAAbnB,GACAA,EAASM,QAAO,SAAAc,GAAO,OACrBA,EAAQC,KAAKC,cAAcC,SAASP,EAAWM,cAAcE,OADxC,IAIzB,OACE,4BACE,kBAAMC,SAAUhB,GAtBH,SAAAW,GACfP,GAASa,EAAAA,EAAAA,IAAWN,IACpBV,GACD,IAmBG,WACE,8BACE,0BAAM,WACN,oCAAWF,EAAS,OAAQ,CAAEmB,UAAU,KAAxC,IAAiDC,KAAK,UACrDjB,EAAOU,OAAQ,0BAAM,+BAExB,8BACE,0BAAM,aACN,oCAAWb,EAAS,SAAU,CAAEmB,UAAU,KAA1C,IAAmDC,KAAK,UACvDjB,EAAOkB,SAAU,0BAAM,+BAG1B,mBAAQD,KAAK,SAAb,SAAsB,oBAIxB,4BACE,wBAAI,2BACJ,kBACEE,SA/BiB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACpClB,GAASoB,EAAAA,EAAAA,GAAUF,GACpB,EA8BOA,MAAOf,EACPY,KAAK,OACLM,YAAY,kBAIfhC,IAAa,SAACiC,EAAA,EAAD,IACb/B,IAAS,SAAC,EAAD,CAAUX,QAASW,KAC7B,wBACGe,GACCA,EAAiBiB,KAAI,SAAAhB,GACnB,OACE,2BACE,wBAAKA,EAAQC,QACb,uBAAID,EAAQS,UACZ,mBAAQQ,QAAS,kBApDPC,EAoD6BlB,EAAQmB,GAnD3DC,QAAQC,IAAIH,QACZzB,GAAS6B,EAAAA,EAAAA,IAAcJ,IAFD,IAAAA,CAoDO,EAAjB,SAAoD,aAH7ClB,EAAQmB,GAQpB,QAIV,C","sources":["components/ErrorMsg/ErrorMsg.jsx","redux/contacts.selectors.js","pages/ContactsPage.jsx"],"sourcesContent":["import React from 'react'\n\nconst ErrorMsg = ({message}) => {\n    return(\n        <p className=\"error\">{message}</p>\n    );\n};\n\nexport default ErrorMsg;","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectPhonebook = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.contacts\n);\nexport const selectContactsIsLoading = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.isLoading\n);\nexport const selectContactsError = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.error\n);\n// export const selectContactsFilterTerm = createSelector(\n//   selectPhonebook,\n//   phonebook => phonebook.filterTerm\n// );\nexport const selectContactsFilterTerm = state => state.filter.filter","// import Filter from 'components/Filter/Filter';\nimport ErrorMsg from 'components/ErrorMsg/ErrorMsg';\nimport Loader from '../components/Loader/Loader';\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsFilterTerm,\n  selectContactsIsLoading,\n} from 'redux/contacts.selectors';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contactsReducer';\nimport { setFilter } from 'redux/filterReducer';\n\nconst ContactsPage = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const filterTerm = useSelector(selectContactsFilterTerm);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onSubmit = contact => {\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const onDeleteContact = contactId => {\n    console.log(contactId);\n    dispatch(deleteContact(contactId));\n  };\n\n  const handleFilterTerm = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  const filteredContacts =\n    contacts !== null &&\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterTerm.toLowerCase().trim())\n    );\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>\n          <span>Name:</span>\n          <input {...register('name', { required: true })} type=\"text\" />\n          {errors.name && <span>This field is required</span>}\n        </label>\n        <label>\n          <span>Number:</span>\n          <input {...register('number', { required: true })} type=\"text\" />\n          {errors.number && <span>This field is required</span>}\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n      {/* <Filter/> */}\n\n      <div>\n        <h3>Find contact by name:</h3>\n        <input\n          onChange={handleFilterTerm}\n          value={filterTerm}\n          type=\"text\"\n          placeholder=\"Enter name\"\n        />\n      </div>\n\n      {isLoading && <Loader />}\n      {error && <ErrorMsg message={error} />}\n      <ul>\n        {filteredContacts &&\n          filteredContacts.map(contact => {\n            return (\n              <li key={contact.id}>\n                <h3>{contact.name}</h3>\n                <p>{contact.number}</p>\n                <button onClick={() => onDeleteContact(contact.id)}>\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["message","className","selectPhonebook","state","phonebook","selectContacts","createSelector","contacts","selectContactsIsLoading","isLoading","selectContactsError","error","selectContactsFilterTerm","filter","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","useSelector","filterTerm","useEffect","fetchContacts","filteredContacts","contact","name","toLowerCase","includes","trim","onSubmit","addContact","required","type","number","onChange","value","target","setFilter","placeholder","Loader","map","onClick","contactId","id","console","log","deleteContact"],"sourceRoot":""}